name: Safe Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    strategy:
      matrix:
        php-version: [7.4, 8.0, 8.1, 8.2, 8.3]
        laravel-version: [6, 7, 8, 9, 10, 11]
        exclude:
          - php-version: 7.4
            laravel-version: 11
          - php-version: 8.0
            laravel-version: 11
          - php-version: 8.1
            laravel-version: 11

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, curl, json

    - name: Install dependencies
      run: |
        # Remove composer.lock to force fresh resolution for each PHP/Laravel combination
        rm -f composer.lock
        composer install --prefer-dist --no-progress --no-interaction

    - name: Run Unit Tests
      run: composer test

    - name: Run Architecture Tests
      run: |
        php -r "
        require 'vendor/autoload.php';
        use Ekatra\Product\EkatraSDK;
        
        echo '=== RELEASE ARCHITECTURE VALIDATION ===' . PHP_EOL;
        
        \$testData = [
            'product_id' => '20051',
            'title' => 'Test Product',
            'currency' => 'INR',
            'variant_quantity' => 5,
            'variant_mrp' => 1000,
            'variant_selling_price' => 800
        ];
        
        // Get expected version from composer.json
        \$composerPath = __DIR__ . '/composer.json';
        \$expectedVersion = 'unknown';
        if (file_exists(\$composerPath)) {
            \$composer = json_decode(file_get_contents(\$composerPath), true);
            \$expectedVersion = \$composer['version'] ?? 'unknown';
        }
        
        \$methods = [
            'transformProduct' => function(\$data) { return EkatraSDK::transformProduct(\$data); },
            'transformVariant' => function(\$data) { return EkatraSDK::transformVariant(\$data); },
            'smartTransformProduct' => function(\$data) { return EkatraSDK::smartTransformProduct(\$data); },
            'smartTransformProductFlexible' => function(\$data) { return EkatraSDK::smartTransformProductFlexible(\$data); }
        ];
        
        \$allPassed = true;
        foreach (\$methods as \$methodName => \$method) {
            try {
                \$result = \$method(\$testData);
                \$checks = [
                    'Has status' => isset(\$result['status']),
                    'Has metadata' => isset(\$result['metadata']),
                    'Has message' => isset(\$result['message']),
                    'Has SDK version' => isset(\$result['metadata']['sdkVersion']),
                    'SDK version matches composer.json' => \$result['metadata']['sdkVersion'] === \$expectedVersion
                ];
                
                \$passed = !in_array(false, \$checks);
                if (!\$passed) {
                    \$allPassed = false;
                    echo '‚ùå ' . \$methodName . ' FAILED' . PHP_EOL;
                } else {
                    echo '‚úÖ ' . \$methodName . ' PASSED' . PHP_EOL;
                }
            } catch (\Exception \$e) {
                \$allPassed = false;
                echo '‚ùå ' . \$methodName . ' EXCEPTION: ' . \$e->getMessage() . PHP_EOL;
            }
        }
        
        if (\$allPassed) {
            echo PHP_EOL . 'üéâ RELEASE ARCHITECTURE VALIDATION PASSED!' . PHP_EOL;
            exit(0);
        } else {
            echo PHP_EOL . '‚ùå RELEASE ARCHITECTURE VALIDATION FAILED!' . PHP_EOL;
            exit(1);
        }
        "

  create-draft-release:
    runs-on: ubuntu-latest
    name: Create Draft Release
    needs: test
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Draft Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
        body: |
          ## Release ${{ github.ref }}
          
          This release has passed all tests across PHP 7.4-8.3 and Laravel 6-11, including comprehensive architecture validation.
          
          ### Features:
          - ‚úÖ Single ResponseBuilder architecture (v${{ github.ref_name }})
          - ‚úÖ Consistent response structure across all methods
          - ‚úÖ Robust error handling for all edge cases
          - ‚úÖ Comprehensive test matrix
          - ‚úÖ Architecture validation tests
          - ‚úÖ Performance and security tests
          
          ### Response Structure:
          ```json
          {
              "status": "success|error",
              "data": {...},
              "metadata": {
                  "validation": {...},
                  "dataType": "...",
                  "canAutoTransform": true/false,
                  "manualSetupRequired": true/false,
                  "maxQuantity": number|null,
                  "sdkVersion": "${{ github.ref_name }}"
              },
              "message": "Product details retrieved successfully"
          }
          ```
          
          ### Installation:
          ```bash
          composer require ekatra/product-sdk:^${{ github.ref_name }}
          ```

  publish-release:
    runs-on: ubuntu-latest
    name: Publish Release
    needs: create-draft-release
    
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Publish Release
      run: |
        gh release edit ${{ github.ref }} --draft=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  packagist:
    runs-on: ubuntu-latest
    name: Update Packagist
    needs: publish-release
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update Packagist
      run: |
        echo "Updating Packagist..."
        echo "Username: ${{ secrets.PACKAGIST_USERNAME }}"
        echo "Token: ${{ secrets.PACKAGIST_TOKEN }}"
        
        if [ -z "${{ secrets.PACKAGIST_USERNAME }}" ] || [ -z "${{ secrets.PACKAGIST_TOKEN }}" ]; then
          echo "‚ùå PACKAGIST_USERNAME or PACKAGIST_TOKEN secrets are not set!"
          echo "Please add these secrets in GitHub repository settings."
          exit 1
        fi
        
        curl -X POST "https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}" \
          -d "repository[url]=https://github.com/Ekatra-Global-Corp/ekatra-php-sdk.git" \
          -H "Content-Type: application/x-www-form-urlencoded"
        
        echo "‚úÖ Packagist update request sent successfully!"
